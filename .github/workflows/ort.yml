name: Simple ORT Complete Pipeline

# Trigger on pushes and PRs, plus manual runs
on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:

# Environment variables for the entire workflow
env:
  ORT_RESULTS_DIR: ort-results
  ORT_DATA_DIR: ort-data

jobs:
  ort-pipeline:
    runs-on: ubuntu-latest
    timeout-minutes: 180  # 3 hours max
    
    steps:
    # Step 1: Get the code
    - name: 📥 Checkout Repository
      uses: actions/checkout@v4

    # Step 2: Free up disk space (ORT needs lots of space)
    - name: 🧹 Free Disk Space
      run: |
        sudo rm -rf /usr/share/dotnet
        sudo rm -rf /opt/ghc
        sudo rm -rf /usr/local/share/boost
        df -h

    # Step 3: Create directories with proper permissions
    - name: 📁 Setup Directories
      run: |
        mkdir -p ${{ env.ORT_RESULTS_DIR }}
        mkdir -p ${{ env.ORT_DATA_DIR }}
        # Set permissions to allow Docker container to write
        chmod 777 ${{ env.ORT_RESULTS_DIR }}
        chmod 777 ${{ env.ORT_DATA_DIR }}
        echo "Created directories with proper permissions:"
        ls -la

    # Step 4: Cache ORT data to speed up future runs
    - name: 💾 Cache ORT Data
      uses: actions/cache@v4
      with:
        path: ${{ env.ORT_DATA_DIR }}
        key: ort-cache-${{ hashFiles('**/requirements.txt', '**/package*.json', '**/pom.xml', '**/build.gradle*', '**/Cargo.toml', '**/go.mod', '**/pubspec.yaml') }}
        restore-keys: |
          ort-cache-

    # Step 5: Pull ORT Docker image
    - name: 🐳 Pull ORT Docker Image
      run: |
        echo "Pulling ORT Docker image..."
        docker pull ghcr.io/oss-review-toolkit/ort:latest --platform linux/x86_64
        echo "✅ ORT image ready"

    # Step 6: ANALYZE - Find dependencies
    - name: 🔍 ORT Analyze (Find Dependencies)
      run: |
        echo "🔍 Starting dependency analysis..."
        # Run with user mapping to avoid permission issues
        docker run --rm --platform linux/x86_64 \
          --user $(id -u):$(id -g) \
          -v ${{ github.workspace }}:/project \
          -w /project \
          ghcr.io/oss-review-toolkit/ort:latest \
          analyze \
          --input-dir /project \
          --output-dir /project/${{ env.ORT_RESULTS_DIR }} \
          -f JSON,YAML
        echo "✅ Analysis complete"

    # Step 7: DOWNLOAD - Get source code
    - name: 📥 ORT Download (Get Source Code)
      run: |
        echo "📥 Downloading source code for dependencies..."
        docker run --rm --platform linux/x86_64 \
          -v ${{ github.workspace }}:/project \
          -v ${{ github.workspace }}/${{ env.ORT_DATA_DIR }}:/tmp/ort-data \
          -w /project \
          ghcr.io/oss-review-toolkit/ort:latest \
          download \
          --input-file /project/${{ env.ORT_RESULTS_DIR }}/analyzer-result.yml \
          --output-dir /project/${{ env.ORT_RESULTS_DIR }} \
          --data-dir /tmp/ort-data
        echo "✅ Download complete"

    # Step 8: SCAN - Find licenses and copyrights
    - name: 🔎 ORT Scan (Find Licenses)
      run: |
        echo "🔎 Scanning for licenses and copyrights..."
        docker run --rm --platform linux/x86_64 \
          -v ${{ github.workspace }}:/project \
          -v ${{ github.workspace }}/${{ env.ORT_DATA_DIR }}:/tmp/ort-data \
          -w /project \
          ghcr.io/oss-review-toolkit/ort:latest \
          scan \
          --input-file /project/${{ env.ORT_RESULTS_DIR }}/downloader-result.yml \
          --output-dir /project/${{ env.ORT_RESULTS_DIR }} \
          --data-dir /tmp/ort-data
        echo "✅ Scan complete"

    # Step 9: ADVISE - Check for security vulnerabilities
    - name: 🛡️ ORT Advise (Security Check)
      run: |
        echo "🛡️ Checking for security vulnerabilities..."
        docker run --rm --platform linux/x86_64 \
          -v ${{ github.workspace }}:/project \
          -v ${{ github.workspace }}/${{ env.ORT_DATA_DIR }}:/tmp/ort-data \
          -w /project \
          ghcr.io/oss-review-toolkit/ort:latest \
          advise \
          --input-file /project/${{ env.ORT_RESULTS_DIR }}/analyzer-result.yml \
          --output-dir /project/${{ env.ORT_RESULTS_DIR }} \
          --advisors OSV \
          --data-dir /tmp/ort-data
        echo "✅ Security check complete"

    # Step 10: REPORT - Generate final reports
    - name: 📊 ORT Report (Generate Reports)
      run: |
        echo "📊 Generating final reports..."
        
        # Find the most complete result file to use as input
        if [ -f "${{ env.ORT_RESULTS_DIR }}/scan-result.yml" ]; then
          INPUT_FILE="/project/${{ env.ORT_RESULTS_DIR }}/scan-result.yml"
          echo "Using scan results as input"
        else
          INPUT_FILE="/project/${{ env.ORT_RESULTS_DIR }}/advisor-result.yml"
          echo "Using advisor results as input"
        fi
        
        docker run --rm --platform linux/x86_64 \
          -v ${{ github.workspace }}:/project \
          -w /project \
          ghcr.io/oss-review-toolkit/ort:latest \
          report \
          --input-file $INPUT_FILE \
          --output-dir /project/${{ env.ORT_RESULTS_DIR }} \
          --report-formats WebApp,StaticHtml,SpdxDocument,CycloneDx,PlainTextTemplate
        echo "✅ Reports generated"

    # Step 11: Show what we created
    - name: 📋 Show Results Summary
      run: |
        echo "📋 Pipeline Results:"
        echo "==================="
        ls -la ${{ env.ORT_RESULTS_DIR }}/
        echo ""
        echo "📊 Generated Reports:"
        echo "- Interactive HTML: ${{ env.ORT_RESULTS_DIR }}/StaticHtml/"
        echo "- SPDX SBOM: ${{ env.ORT_RESULTS_DIR }}/bom.spdx.yml"
        echo "- CycloneDX SBOM: ${{ env.ORT_RESULTS_DIR }}/bom.json"
        echo "- Plain Text Report: ${{ env.ORT_RESULTS_DIR }}/NOTICE"
        echo ""
        
        # Count dependencies if analyzer result exists
        if [ -f "${{ env.ORT_RESULTS_DIR }}/analyzer-result.yml" ]; then
          DEPS=$(grep -c "^    - " "${{ env.ORT_RESULTS_DIR }}/analyzer-result.yml" 2>/dev/null || echo "0")
          echo "📦 Total dependencies found: $DEPS"
        fi

    # Step 12: Create GitHub summary
    - name: 📝 Create Job Summary
      if: always()
      run: |
        echo "# 🎯 ORT Pipeline Complete!" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "## 📊 Results Overview" >> $GITHUB_STEP_SUMMARY
        echo "| File | Description |" >> $GITHUB_STEP_SUMMARY
        echo "|------|-------------|" >> $GITHUB_STEP_SUMMARY
        echo "| \`StaticHtml/scan-report-web-app.html\` | Interactive dashboard |" >> $GITHUB_STEP_SUMMARY
        echo "| \`bom.spdx.yml\` | SPDX Software Bill of Materials |" >> $GITHUB_STEP_SUMMARY
        echo "| \`bom.json\` | CycloneDX SBOM |" >> $GITHUB_STEP_SUMMARY
        echo "| \`NOTICE\` | License notices |" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "## 🎉 Next Steps" >> $GITHUB_STEP_SUMMARY
        echo "1. Download the \`ort-results\` artifact below" >> $GITHUB_STEP_SUMMARY
        echo "2. Open \`StaticHtml/scan-report-web-app.html\` in your browser" >> $GITHUB_STEP_SUMMARY
        echo "3. Review license compliance and security findings" >> $GITHUB_STEP_SUMMARY

    # Step 13: Upload all results as artifacts
    - name: 📤 Upload Complete Results
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: ort-complete-results
        path: |
          ${{ env.ORT_RESULTS_DIR }}/
          !${{ env.ORT_DATA_DIR }}/
        retention-days: 30

    # Step 14: Upload just the HTML report (easier to share)
    - name: 📤 Upload HTML Report
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: ort-html-report
        path: ${{ env.ORT_RESULTS_DIR }}/StaticHtml/
        retention-days: 90

    # Step 15: Comment on PR with results (if this is a PR)
    - name: 💬 Comment on PR
      if: github.event_name == 'pull_request'
      uses: actions/github-script@v7
      with:
        script: |
          const fs = require('fs');
          
          let comment = `## 🎯 ORT Analysis Complete\n\n`;
          comment += `✅ Full ORT pipeline executed successfully!\n\n`;
          comment += `### 📁 Results Available:\n`;
          comment += `- **Interactive Report**: Download \`ort-html-report\` artifact\n`;
          comment += `- **Complete Analysis**: Download \`ort-complete-results\` artifact\n`;
          comment += `- **SPDX SBOM**: Software Bill of Materials generated\n`;
          comment += `- **Security Scan**: Vulnerability analysis included\n\n`;
          comment += `### 🔗 Quick Access:\n`;
          comment += `- [View Workflow Run](https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }})\n`;
          comment += `- [Download Artifacts](https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }}#artifacts)\n\n`;
          comment += `Open \`StaticHtml/scan-report-web-app.html\` from the HTML report artifact to view the interactive dashboard! 🚀`;
          
          github.rest.issues.createComment({
            issue_number: context.issue.number,
            owner: context.repo.owner,
            repo: context.repo.repo,
            body: comment
          });